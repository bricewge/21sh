* 21sh
** Tasks
*** TODO Write lexer
- token recognition
- grammar symbols

Return a linked list of tokens to the parser.
**** Current issues
- How to handle unlimited line length? Use
- How to 
**** TODO Use binary mask for scanner status
**** TODO Use lfind for rule 6
** Research
- lexical analysis :: The process of converting a sequence of characters into a
     sequence of tokens (strings with an assigned and thus identified meaning).
- lexer
- syntactic analysis
- parser
- semantic analysis
- interpreter
- abstract syntax tree (AST)
*** shell language
**** Operators
An [[http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap03.html#tag_03_260][operator]] is either a control operator or a redirection operator.

[[http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap03.html#tag_03_318][Redirection operators]]:
- =<=
- =>= or =>|=
- =>>=
- =<<= or =<<-=
- =<&=
- =>&=
- =<>=

[[http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap03.html#tag_03_113][Control operators]]:
- =&=
- =&&=
- =(=
- =)=
- =;=
- =;;=
- =newline=
- =|=
- =||=

Any other token is a [[http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap03.html#tag_03_446][word]].

**** Reserved words
| Character   | Utility                | Quoted | Note |
|-------------+------------------------+--------+------|
| =\vert=     | grammar                | x      |      |
| =&=         | grammar                | x      |      |
| =;=         | grammar                | x      |      |
| =<=         | grammar                | x      |      |
| =>=         | grammar                | x      |      |
| =(=         | grammar                | x      |      |
| =)=         | grammar                | x      |      |
| =$=         | expansion              | x      |      |
| =`=         | subsitution            | x      |      |
| =\=         | [[http://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html#tag_18_02_01][escape char]]            | x      |      |
| ="=         | quotation              | x      |      |
| ='=         | quotation              | x      |      |
| =<space>=   |                        | x      |      |
| =<tab>=     |                        | x      |      |
| =<newline>= |                        | x      |      |
| =*=         |                        | ?      |      |
| =?=         |                        | ?      |      |
| =[=         |                        | ?      |      |
| =#=         | comment, special param | ?      |      |
| =~=         | expansion              | ?      |      |
| =\equal=    |                        | ?      |      |
| =%=         |                        | ?      |      |

**** Grammar
#+NAME=POSIX.1-2008
#+BEGIN_SRC 
/* -------------------------------------------------------
   The grammar symbols
   ------------------------------------------------------- */
%token  WORD
%token  ASSIGNMENT_WORD
%token  NAME
%token  NEWLINE
%token  IO_NUMBER


/* The following are the operators (see XBD Operator)
   containing more than one character. */



%token  AND_IF    OR_IF    DSEMI
/*      '&&'      '||'     ';;'    */


%token  DLESS  DGREAT  LESSAND  GREATAND  LESSGREAT  DLESSDASH
/*      '<<'   '>>'    '<&'     '>&'      '<>'       '<<-'   */


%token  CLOBBER
/*      '>|'   */


/* The following are the reserved words. */


%token  If    Then    Else    Elif    Fi    Do    Done
/*      'if'  'then'  'else'  'elif'  'fi'  'do'  'done'   */


%token  Case    Esac    While    Until    For
/*      'case'  'esac'  'while'  'until'  'for'   */


/* These are reserved words, not operator tokens, and are
   recognized when reserved words are recognized. */


%token  Lbrace    Rbrace    Bang
/*      '{'       '}'       '!'   */


%token  In
/*      'in'   */


/* -------------------------------------------------------
   The Grammar
   ------------------------------------------------------- */
%start program
%%
program          : linebreak complete_commands linebreak
                 | linebreak
                 ;
complete_commands: complete_commands newline_list complete_command
                 |                                complete_command
                 ;
complete_command : list separator_op
                 | list
                 ;
list             : list separator_op and_or
                 |                   and_or
                 ;
and_or           :                         pipeline
                 | and_or AND_IF linebreak pipeline
                 | and_or OR_IF  linebreak pipeline
                 ;
pipeline         :      pipe_sequence
                 | Bang pipe_sequence
                 ;
pipe_sequence    :                             command
                 | pipe_sequence '|' linebreak command
                 ;
command          : simple_command
                 | compound_command
                 | compound_command redirect_list
                 | function_definition
                 ;
compound_command : brace_group
                 | subshell
                 | for_clause
                 | case_clause
                 | if_clause
                 | while_clause
                 | until_clause
                 ;
subshell         : '(' compound_list ')'
                 ;
compound_list    : linebreak term
                 | linebreak term separator
                 ;
term             : term separator and_or
                 |                and_or
                 ;
for_clause       : For name                                      do_group
                 | For name                       sequential_sep do_group
                 | For name linebreak in          sequential_sep do_group
                 | For name linebreak in wordlist sequential_sep do_group
                 ;
name             : NAME                     /* Apply rule 5 */
                 ;
in               : In                       /* Apply rule 6 */
                 ;
wordlist         : wordlist WORD
                 |          WORD
                 ;
case_clause      : Case WORD linebreak in linebreak case_list    Esac
                 | Case WORD linebreak in linebreak case_list_ns Esac
                 | Case WORD linebreak in linebreak              Esac
                 ;
case_list_ns     : case_list case_item_ns
                 |           case_item_ns
                 ;
case_list        : case_list case_item
                 |           case_item
                 ;
case_item_ns     :     pattern ')' linebreak
                 |     pattern ')' compound_list
                 | '(' pattern ')' linebreak
                 | '(' pattern ')' compound_list
                 ;
case_item        :     pattern ')' linebreak     DSEMI linebreak
                 |     pattern ')' compound_list DSEMI linebreak
                 | '(' pattern ')' linebreak     DSEMI linebreak
                 | '(' pattern ')' compound_list DSEMI linebreak
                 ;
pattern          :             WORD         /* Apply rule 4 */
                 | pattern '|' WORD         /* Do not apply rule 4 */
                 ;
if_clause        : If compound_list Then compound_list else_part Fi
                 | If compound_list Then compound_list           Fi
                 ;
else_part        : Elif compound_list Then compound_list
                 | Elif compound_list Then compound_list else_part
                 | Else compound_list
                 ;
while_clause     : While compound_list do_group
                 ;
until_clause     : Until compound_list do_group
                 ;
function_definition : fname '(' ')' linebreak function_body
                 ;
function_body    : compound_command                /* Apply rule 9 */
                 | compound_command redirect_list  /* Apply rule 9 */
                 ;
fname            : NAME                            /* Apply rule 8 */
                 ;
brace_group      : Lbrace compound_list Rbrace
                 ;
do_group         : Do compound_list Done           /* Apply rule 6 */
                 ;
simple_command   : cmd_prefix cmd_word cmd_suffix
                 | cmd_prefix cmd_word
                 | cmd_prefix
                 | cmd_name cmd_suffix
                 | cmd_name
                 ;
cmd_name         : WORD                   /* Apply rule 7a */
                 ;
cmd_word         : WORD                   /* Apply rule 7b */
                 ;
cmd_prefix       :            io_redirect
                 | cmd_prefix io_redirect
                 |            ASSIGNMENT_WORD
                 | cmd_prefix ASSIGNMENT_WORD
                 ;
cmd_suffix       :            io_redirect
                 | cmd_suffix io_redirect
                 |            WORD
                 | cmd_suffix WORD
                 ;
redirect_list    :               io_redirect
                 | redirect_list io_redirect
                 ;
io_redirect      :           io_file
                 | IO_NUMBER io_file
                 |           io_here
                 | IO_NUMBER io_here
                 ;
io_file          : '<'       filename
                 | LESSAND   filename
                 | '>'       filename
                 | GREATAND  filename
                 | DGREAT    filename
                 | LESSGREAT filename
                 | CLOBBER   filename
                 ;
filename         : WORD                      /* Apply rule 2 */
                 ;
io_here          : DLESS     here_end
                 | DLESSDASH here_end
                 ;
here_end         : WORD                      /* Apply rule 3 */
                 ;
newline_list     :              NEWLINE
                 | newline_list NEWLINE
                 ;
linebreak        : newline_list
                 | /* empty */
                 ;
separator_op     : '&'
                 | ';'
                 ;
separator        : separator_op linebreak
                 | newline_list
                 ;
sequential_sep   : ';' linebreak
                 | newline_list
                 ;
#+END_SRC

**** Ambiguity
=$((= vs =$( (=:
- https://github.com/mvdan/sh#caveats
- https://github.com/mvdan/sh/issues/30

** Pipeline
*** Input
=ls -al *a | grep me > file1=
*** Lexical analysis
Length of =input= 27 chars.
| Lexeme | Token category |
|--------+----------------|
| ls     | WORD           |
| -al    | WORD           |
| a*     | WORD           |
| \vert      | ?              |
| grep   | WORD           |
| me     | WORD           |
| >      | ?              |
| file1  | WORD           |

*** Parsing
*** Command execution
** Ressources
- [[https://forum.intra.42.fr/topics/16416/messages/last][Various links from forum.intra.42.fr]]
- http://www.aosabook.org/en/bash.html
- [[https://news.ycombinator.com/item?id=14549281][HN: Writing a Unix Shell - Part II]]
  - https://www.cs.purdue.edu/homes/grr/SystemsProgrammingBook/Book/Chapter5-WritingYourOwnShell.pdf
  - http://csapp.cs.cmu.edu/3e/shlab.pdf
- [[http://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html#tag_18_10][POSIX Shell Grammar]]

Lexical analysis:
- http://parsingintro.sourceforge.net/
- http://savage.net.au/Ron/html/graphviz2.marpa/Lexing.and.Parsing.Overview.html
- http://cs.wellesley.edu/~cs235/fall11/lectures/35_lexing_and_parsing.pdf
- https://ai.berkeley.edu/~cs164/sp05/lectures/slide2b-2x4.pdf

Books:
- Concepts of Programming Languages, by Robert W. Sebesta.
